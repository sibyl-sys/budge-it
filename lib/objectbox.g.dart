// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'services/account.dart';
import 'services/budget.dart';
import 'services/budgetCap.dart';
import 'services/category.dart';
import 'services/currency.dart';
import 'services/favoriteTransaction.dart';
import 'services/settings.dart';
import 'services/subcategory.dart';
import 'services/transaction.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 166402456504234215),
      name: 'Account',
      lastPropertyId: const IdUid(12, 8305057102929484962),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7791555651347460592),
            name: 'accountID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8849331688642826909),
            name: 'icon',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1007789336436199638),
            name: 'color',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6603267915113875338),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 257036243639946391),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4267110365644887321),
            name: 'balance',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5194982234573914676),
            name: 'creditLimit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3048016850767127121),
            name: 'isIncludedInTotalNet',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7236535467079320341),
            name: 'currencyID',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7784705406952710739),
            name: 'isArchived',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8305057102929484962),
            name: 'dbAccountType',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5591438262522025838),
      name: 'Category',
      lastPropertyId: const IdUid(9, 5640264298874476428),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1996252383194141059),
            name: 'categoryID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 708224448441672261),
            name: 'icon',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5746205017404965449),
            name: 'color',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6808437952301056882),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7961740271939257333),
            name: 'index',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2794255354296530867),
            name: 'dbCategoryType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7671964770639684222),
            name: 'dbLastTransactionImportance',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 1285431702513897569),
            name: 'subcategories',
            targetId: const IdUid(4, 7148541835359323122))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1503650968266322760),
      name: 'Currency',
      lastPropertyId: const IdUid(4, 4722279864359630437),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3624062280739972732),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 508472351779456068),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5965076375368430567),
            name: 'symbol',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4722279864359630437),
            name: 'exchangeRateToUSD',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 7148541835359323122),
      name: 'Subcategory',
      lastPropertyId: const IdUid(3, 8209051759689410871),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6673357979479774351),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1090289012107434123),
            name: 'icon',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8209051759689410871),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5949585774518277514),
      name: 'Transaction',
      lastPropertyId: const IdUid(10, 1148654174728662569),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2498316605268335846),
            name: 'transactionID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2494635976145824618),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2486963153687818515),
            name: 'note',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6407911649427600755),
            name: 'timestamp',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1965364009872142908),
            name: 'toID',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8350131667560200221),
            name: 'fromID',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9164030662150802145),
            name: 'isArchived',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 685565956456932830),
            name: 'dbTransactionType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4214703002186977694),
            name: 'dbImportance',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1148654174728662569),
            name: 'subcategoryID',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5385464363218912765),
      name: 'Settings',
      lastPropertyId: const IdUid(7, 4741175380871182387),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8928975402929862221),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2913812890743301887),
            name: 'primaryCurrencyID',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 193672008847672734),
            name: 'spendAlertAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2432796752218068314),
            name: 'selectedCategoryTo',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2265429933256501649),
            name: 'selectedAccountFrom',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5571649052621771703),
            name: 'selectedAccountTo',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4741175380871182387),
            name: 'selectedTransactionType',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 562735512304116534),
      name: 'FavoriteTransaction',
      lastPropertyId: const IdUid(8, 5238873149732740466),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2776013490455948783),
            name: 'favoriteID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1881693453013842057),
            name: 'toID',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4281251359593087188),
            name: 'fromID',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7329229538790752249),
            name: 'isArchived',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8046700573976391250),
            name: 'dbTransactionType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4340518476120779236),
            name: 'dbImportance',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7658815484122720605),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5238873149732740466),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 6907309110845189906),
      name: 'Budget',
      lastPropertyId: const IdUid(6, 5608647318040087238),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1549882607133597199),
            name: 'budgetID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7655388425739774901),
            name: 'icon',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6712458917664138391),
            name: 'color',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5136600631658749861),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5608647318040087238),
            name: 'willCarryOver',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 6494261179901916418),
            name: 'toTrack',
            targetId: const IdUid(2, 5591438262522025838)),
        ModelRelation(
            id: const IdUid(3, 4019700745509467872),
            name: 'budgetCap',
            targetId: const IdUid(9, 6551503317915763204))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 6551503317915763204),
      name: 'BudgetCap',
      lastPropertyId: const IdUid(5, 1902462991968783265),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 401860051019746473),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7282642056396858248),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8236896728602898099),
            name: 'year',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4420009488407882880),
            name: 'cap',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(9, 6551503317915763204),
      lastIndexId: const IdUid(1, 7569967098903491230),
      lastRelationId: const IdUid(3, 4019700745509467872),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [7569967098903491230],
      retiredPropertyUids: const [
        1902462991968783265,
        2343707797326796135,
        1630040688712898633,
        8588361961052653005,
        5640264298874476428
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Account: EntityDefinition<Account>(
        model: _entities[0],
        toOneRelations: (Account object) => [],
        toManyRelations: (Account object) => {},
        getId: (Account object) => object.accountID,
        setId: (Account object, int id) {
          object.accountID = id;
        },
        objectToFB: (Account object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(13);
          fbb.addInt64(0, object.accountID);
          fbb.addInt64(1, object.icon);
          fbb.addInt64(2, object.color);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addFloat64(5, object.balance);
          fbb.addFloat64(6, object.creditLimit);
          fbb.addBool(7, object.isIncludedInTotalNet);
          fbb.addInt64(9, object.currencyID);
          fbb.addBool(10, object.isArchived);
          fbb.addInt64(11, object.dbAccountType);
          fbb.finish(fbb.endTable());
          return object.accountID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final iconParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final colorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final balanceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final creditLimitParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final isIncludedInTotalNetParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final isArchivedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final currencyIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final object = Account(
              icon: iconParam,
              color: colorParam,
              name: nameParam,
              balance: balanceParam,
              creditLimit: creditLimitParam,
              description: descriptionParam,
              isIncludedInTotalNet: isIncludedInTotalNetParam,
              isArchived: isArchivedParam,
              currencyID: currencyIDParam)
            ..accountID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbAccountType = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 26);

          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {
              RelInfo<Category>.toMany(1, object.categoryID):
                  object.subcategories
            },
        getId: (Category object) => object.categoryID,
        setId: (Category object, int id) {
          object.categoryID = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(10);
          fbb.addInt64(0, object.categoryID);
          fbb.addInt64(1, object.icon);
          fbb.addInt64(2, object.color);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.index);
          fbb.addInt64(5, object.dbCategoryType);
          fbb.addInt64(7, object.dbLastTransactionImportance);
          fbb.finish(fbb.endTable());
          return object.categoryID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final iconParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final colorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final indexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = Category(
              icon: iconParam,
              color: colorParam,
              name: nameParam,
              index: indexParam)
            ..categoryID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbCategoryType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14)
            ..dbLastTransactionImportance = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 18);
          InternalToManyAccess.setRelInfo<Category>(object.subcategories, store,
              RelInfo<Category>.toMany(1, object.categoryID));
          return object;
        }),
    Currency: EntityDefinition<Currency>(
        model: _entities[2],
        toOneRelations: (Currency object) => [],
        toManyRelations: (Currency object) => {},
        getId: (Currency object) => object.id,
        setId: (Currency object, int id) {
          object.id = id;
        },
        objectToFB: (Currency object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final symbolOffset = fbb.writeString(object.symbol);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, symbolOffset);
          fbb.addFloat64(3, object.exchangeRateToUSD);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final symbolParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final exchangeRateToUSDParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = Currency(
              name: nameParam,
              symbol: symbolParam,
              exchangeRateToUSD: exchangeRateToUSDParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Subcategory: EntityDefinition<Subcategory>(
        model: _entities[3],
        toOneRelations: (Subcategory object) => [],
        toManyRelations: (Subcategory object) => {},
        getId: (Subcategory object) => object.id,
        setId: (Subcategory object, int id) {
          object.id = id;
        },
        objectToFB: (Subcategory object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.icon);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final iconParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Subcategory(icon: iconParam, name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Transaction: EntityDefinition<Transaction>(
        model: _entities[4],
        toOneRelations: (Transaction object) => [],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.transactionID,
        setId: (Transaction object, int id) {
          object.transactionID = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final noteOffset = fbb.writeString(object.note);
          fbb.startTable(11);
          fbb.addInt64(0, object.transactionID);
          fbb.addFloat64(1, object.value);
          fbb.addOffset(2, noteOffset);
          fbb.addInt64(3, object.timestamp.millisecondsSinceEpoch);
          fbb.addInt64(4, object.toID);
          fbb.addInt64(5, object.fromID);
          fbb.addBool(6, object.isArchived);
          fbb.addInt64(7, object.dbTransactionType);
          fbb.addInt64(8, object.dbImportance);
          fbb.addInt64(9, object.subcategoryID);
          fbb.finish(fbb.endTable());
          return object.transactionID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final timestampParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final toIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final fromIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final isArchivedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final subcategoryIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final object = Transaction(
              value: valueParam,
              note: noteParam,
              timestamp: timestampParam,
              toID: toIDParam,
              fromID: fromIDParam,
              isArchived: isArchivedParam,
              subcategoryID: subcategoryIDParam)
            ..transactionID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbTransactionType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18)
            ..dbImportance = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 20);

          return object;
        }),
    Settings: EntityDefinition<Settings>(
        model: _entities[5],
        toOneRelations: (Settings object) => [],
        toManyRelations: (Settings object) => {},
        getId: (Settings object) => object.id,
        setId: (Settings object, int id) {
          object.id = id;
        },
        objectToFB: (Settings object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.primaryCurrencyID);
          fbb.addFloat64(2, object.spendAlertAmount);
          fbb.addInt64(3, object.selectedCategoryTo);
          fbb.addInt64(4, object.selectedAccountFrom);
          fbb.addInt64(5, object.selectedAccountTo);
          fbb.addInt64(6, object.selectedTransactionType);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final primaryCurrencyIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final spendAlertAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final selectedCategoryToParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final selectedAccountToParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final selectedAccountFromParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final selectedTransactionTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = Settings(
              id: idParam,
              primaryCurrencyID: primaryCurrencyIDParam,
              spendAlertAmount: spendAlertAmountParam,
              selectedCategoryTo: selectedCategoryToParam,
              selectedAccountTo: selectedAccountToParam,
              selectedAccountFrom: selectedAccountFromParam,
              selectedTransactionType: selectedTransactionTypeParam);

          return object;
        }),
    FavoriteTransaction: EntityDefinition<FavoriteTransaction>(
        model: _entities[6],
        toOneRelations: (FavoriteTransaction object) => [],
        toManyRelations: (FavoriteTransaction object) => {},
        getId: (FavoriteTransaction object) => object.favoriteID,
        setId: (FavoriteTransaction object, int id) {
          object.favoriteID = id;
        },
        objectToFB: (FavoriteTransaction object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(9);
          fbb.addInt64(0, object.favoriteID);
          fbb.addInt64(1, object.toID);
          fbb.addInt64(2, object.fromID);
          fbb.addBool(3, object.isArchived);
          fbb.addInt64(4, object.dbTransactionType);
          fbb.addInt64(5, object.dbImportance);
          fbb.addFloat64(6, object.value);
          fbb.addOffset(7, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.favoriteID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final toIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final fromIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final isArchivedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final object = FavoriteTransaction(
              toID: toIDParam,
              fromID: fromIDParam,
              isArchived: isArchivedParam,
              value: valueParam,
              description: descriptionParam)
            ..favoriteID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbTransactionType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12)
            ..dbImportance = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        }),
    Budget: EntityDefinition<Budget>(
        model: _entities[7],
        toOneRelations: (Budget object) => [],
        toManyRelations: (Budget object) => {
              RelInfo<Budget>.toMany(2, object.budgetID): object.toTrack,
              RelInfo<Budget>.toMany(3, object.budgetID): object.budgetCap
            },
        getId: (Budget object) => object.budgetID,
        setId: (Budget object, int id) {
          object.budgetID = id;
        },
        objectToFB: (Budget object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.budgetID);
          fbb.addInt64(1, object.icon);
          fbb.addInt64(2, object.color);
          fbb.addOffset(3, nameOffset);
          fbb.addBool(5, object.willCarryOver);
          fbb.finish(fbb.endTable());
          return object.budgetID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final iconParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final colorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final willCarryOverParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = Budget(
              icon: iconParam,
              color: colorParam,
              name: nameParam,
              willCarryOver: willCarryOverParam)
            ..budgetID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<Budget>(object.toTrack, store,
              RelInfo<Budget>.toMany(2, object.budgetID));
          InternalToManyAccess.setRelInfo<Budget>(object.budgetCap, store,
              RelInfo<Budget>.toMany(3, object.budgetID));
          return object;
        }),
    BudgetCap: EntityDefinition<BudgetCap>(
        model: _entities[8],
        toOneRelations: (BudgetCap object) => [],
        toManyRelations: (BudgetCap object) => {},
        getId: (BudgetCap object) => object.id,
        setId: (BudgetCap object, int id) {
          object.id = id;
        },
        objectToFB: (BudgetCap object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.month);
          fbb.addInt64(2, object.year);
          fbb.addFloat64(3, object.cap);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final monthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final yearParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final capParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = BudgetCap(
              month: monthParam, year: yearParam, cap: capParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Account] entity fields to define ObjectBox queries.
class Account_ {
  /// see [Account.accountID]
  static final accountID =
      QueryIntegerProperty<Account>(_entities[0].properties[0]);

  /// see [Account.icon]
  static final icon = QueryIntegerProperty<Account>(_entities[0].properties[1]);

  /// see [Account.color]
  static final color =
      QueryIntegerProperty<Account>(_entities[0].properties[2]);

  /// see [Account.name]
  static final name = QueryStringProperty<Account>(_entities[0].properties[3]);

  /// see [Account.description]
  static final description =
      QueryStringProperty<Account>(_entities[0].properties[4]);

  /// see [Account.balance]
  static final balance =
      QueryDoubleProperty<Account>(_entities[0].properties[5]);

  /// see [Account.creditLimit]
  static final creditLimit =
      QueryDoubleProperty<Account>(_entities[0].properties[6]);

  /// see [Account.isIncludedInTotalNet]
  static final isIncludedInTotalNet =
      QueryBooleanProperty<Account>(_entities[0].properties[7]);

  /// see [Account.currencyID]
  static final currencyID =
      QueryIntegerProperty<Account>(_entities[0].properties[8]);

  /// see [Account.isArchived]
  static final isArchived =
      QueryBooleanProperty<Account>(_entities[0].properties[9]);

  /// see [Account.dbAccountType]
  static final dbAccountType =
      QueryIntegerProperty<Account>(_entities[0].properties[10]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.categoryID]
  static final categoryID =
      QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// see [Category.icon]
  static final icon =
      QueryIntegerProperty<Category>(_entities[1].properties[1]);

  /// see [Category.color]
  static final color =
      QueryIntegerProperty<Category>(_entities[1].properties[2]);

  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[1].properties[3]);

  /// see [Category.index]
  static final index =
      QueryIntegerProperty<Category>(_entities[1].properties[4]);

  /// see [Category.dbCategoryType]
  static final dbCategoryType =
      QueryIntegerProperty<Category>(_entities[1].properties[5]);

  /// see [Category.dbLastTransactionImportance]
  static final dbLastTransactionImportance =
      QueryIntegerProperty<Category>(_entities[1].properties[6]);

  /// see [Category.subcategories]
  static final subcategories =
      QueryRelationToMany<Category, Subcategory>(_entities[1].relations[0]);
}

/// [Currency] entity fields to define ObjectBox queries.
class Currency_ {
  /// see [Currency.id]
  static final id = QueryIntegerProperty<Currency>(_entities[2].properties[0]);

  /// see [Currency.name]
  static final name = QueryStringProperty<Currency>(_entities[2].properties[1]);

  /// see [Currency.symbol]
  static final symbol =
      QueryStringProperty<Currency>(_entities[2].properties[2]);

  /// see [Currency.exchangeRateToUSD]
  static final exchangeRateToUSD =
      QueryDoubleProperty<Currency>(_entities[2].properties[3]);
}

/// [Subcategory] entity fields to define ObjectBox queries.
class Subcategory_ {
  /// see [Subcategory.id]
  static final id =
      QueryIntegerProperty<Subcategory>(_entities[3].properties[0]);

  /// see [Subcategory.icon]
  static final icon =
      QueryIntegerProperty<Subcategory>(_entities[3].properties[1]);

  /// see [Subcategory.name]
  static final name =
      QueryStringProperty<Subcategory>(_entities[3].properties[2]);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// see [Transaction.transactionID]
  static final transactionID =
      QueryIntegerProperty<Transaction>(_entities[4].properties[0]);

  /// see [Transaction.value]
  static final value =
      QueryDoubleProperty<Transaction>(_entities[4].properties[1]);

  /// see [Transaction.note]
  static final note =
      QueryStringProperty<Transaction>(_entities[4].properties[2]);

  /// see [Transaction.timestamp]
  static final timestamp =
      QueryIntegerProperty<Transaction>(_entities[4].properties[3]);

  /// see [Transaction.toID]
  static final toID =
      QueryIntegerProperty<Transaction>(_entities[4].properties[4]);

  /// see [Transaction.fromID]
  static final fromID =
      QueryIntegerProperty<Transaction>(_entities[4].properties[5]);

  /// see [Transaction.isArchived]
  static final isArchived =
      QueryBooleanProperty<Transaction>(_entities[4].properties[6]);

  /// see [Transaction.dbTransactionType]
  static final dbTransactionType =
      QueryIntegerProperty<Transaction>(_entities[4].properties[7]);

  /// see [Transaction.dbImportance]
  static final dbImportance =
      QueryIntegerProperty<Transaction>(_entities[4].properties[8]);

  /// see [Transaction.subcategoryID]
  static final subcategoryID =
      QueryIntegerProperty<Transaction>(_entities[4].properties[9]);
}

/// [Settings] entity fields to define ObjectBox queries.
class Settings_ {
  /// see [Settings.id]
  static final id = QueryIntegerProperty<Settings>(_entities[5].properties[0]);

  /// see [Settings.primaryCurrencyID]
  static final primaryCurrencyID =
      QueryIntegerProperty<Settings>(_entities[5].properties[1]);

  /// see [Settings.spendAlertAmount]
  static final spendAlertAmount =
      QueryDoubleProperty<Settings>(_entities[5].properties[2]);

  /// see [Settings.selectedCategoryTo]
  static final selectedCategoryTo =
      QueryIntegerProperty<Settings>(_entities[5].properties[3]);

  /// see [Settings.selectedAccountFrom]
  static final selectedAccountFrom =
      QueryIntegerProperty<Settings>(_entities[5].properties[4]);

  /// see [Settings.selectedAccountTo]
  static final selectedAccountTo =
      QueryIntegerProperty<Settings>(_entities[5].properties[5]);

  /// see [Settings.selectedTransactionType]
  static final selectedTransactionType =
      QueryIntegerProperty<Settings>(_entities[5].properties[6]);
}

/// [FavoriteTransaction] entity fields to define ObjectBox queries.
class FavoriteTransaction_ {
  /// see [FavoriteTransaction.favoriteID]
  static final favoriteID =
      QueryIntegerProperty<FavoriteTransaction>(_entities[6].properties[0]);

  /// see [FavoriteTransaction.toID]
  static final toID =
      QueryIntegerProperty<FavoriteTransaction>(_entities[6].properties[1]);

  /// see [FavoriteTransaction.fromID]
  static final fromID =
      QueryIntegerProperty<FavoriteTransaction>(_entities[6].properties[2]);

  /// see [FavoriteTransaction.isArchived]
  static final isArchived =
      QueryBooleanProperty<FavoriteTransaction>(_entities[6].properties[3]);

  /// see [FavoriteTransaction.dbTransactionType]
  static final dbTransactionType =
      QueryIntegerProperty<FavoriteTransaction>(_entities[6].properties[4]);

  /// see [FavoriteTransaction.dbImportance]
  static final dbImportance =
      QueryIntegerProperty<FavoriteTransaction>(_entities[6].properties[5]);

  /// see [FavoriteTransaction.value]
  static final value =
      QueryDoubleProperty<FavoriteTransaction>(_entities[6].properties[6]);

  /// see [FavoriteTransaction.description]
  static final description =
      QueryStringProperty<FavoriteTransaction>(_entities[6].properties[7]);
}

/// [Budget] entity fields to define ObjectBox queries.
class Budget_ {
  /// see [Budget.budgetID]
  static final budgetID =
      QueryIntegerProperty<Budget>(_entities[7].properties[0]);

  /// see [Budget.icon]
  static final icon = QueryIntegerProperty<Budget>(_entities[7].properties[1]);

  /// see [Budget.color]
  static final color = QueryIntegerProperty<Budget>(_entities[7].properties[2]);

  /// see [Budget.name]
  static final name = QueryStringProperty<Budget>(_entities[7].properties[3]);

  /// see [Budget.willCarryOver]
  static final willCarryOver =
      QueryBooleanProperty<Budget>(_entities[7].properties[4]);

  /// see [Budget.toTrack]
  static final toTrack =
      QueryRelationToMany<Budget, Category>(_entities[7].relations[0]);

  /// see [Budget.budgetCap]
  static final budgetCap =
      QueryRelationToMany<Budget, BudgetCap>(_entities[7].relations[1]);
}

/// [BudgetCap] entity fields to define ObjectBox queries.
class BudgetCap_ {
  /// see [BudgetCap.id]
  static final id = QueryIntegerProperty<BudgetCap>(_entities[8].properties[0]);

  /// see [BudgetCap.month]
  static final month =
      QueryIntegerProperty<BudgetCap>(_entities[8].properties[1]);

  /// see [BudgetCap.year]
  static final year =
      QueryIntegerProperty<BudgetCap>(_entities[8].properties[2]);

  /// see [BudgetCap.cap]
  static final cap = QueryDoubleProperty<BudgetCap>(_entities[8].properties[3]);
}
